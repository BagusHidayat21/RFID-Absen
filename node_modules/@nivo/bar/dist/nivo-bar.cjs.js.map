{"version":3,"file":"nivo-bar.cjs.js","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/props.ts","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/compute/totals.ts","../src/hooks.ts","../src/BarTotals.tsx","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBarCanvas.tsx","../src/ResponsiveBar.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Text } from '@nivo/text'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n                data-testid={`bar.item.${data.id}.${data.index}`}\n            />\n            {shouldRenderLabel && (\n                <Text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        // We don't want the label to intercept mouse events\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </Text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { BarCanvasLayerId, BarLayerId, ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'] as BarLayerId[],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'] as BarCanvasLayerId[],\n\n    pixelRatio: typeof window !== 'undefined' ? (window.devicePixelRatio ?? 1) : 1,\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            }) as RawDatum\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<RawDatum extends BarDatum>(\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    reverse: BarCommonProps<RawDatum>['reverse'] = defaultProps.reverse,\n    labelPosition: BarCommonProps<RawDatum>['labelPosition'] = defaultProps.labelPosition,\n    labelOffset: BarCommonProps<RawDatum>['labelOffset'] = defaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? (yScale(d) ?? 0) : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : (xScale(d) ?? 0))\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy.js'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <RawDatum extends BarDatum>(\n    bars: ComputedBarDatum<RawDatum>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    groupMode: BarCommonProps<RawDatum>['groupMode'] = defaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useValueFormatter, Margin } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n    totalsOffset = defaultProps.totalsOffset,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n    totalsOffset?: BarCommonProps<RawDatum>['totalsOffset']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n","import { useTheme } from '@nivo/theming'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './props'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n\n    initialHiddenIds,\n\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<RawDatum>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useValueFormatter,\n} from '@nivo/core'\nimport { Theme, useTheme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { roundedRect } from '@nivo/canvas'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<RawDatum extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: Theme,\n    layout: BarCommonProps<RawDatum>['layout'] = canvasDefaultProps.layout\n) {\n    setCanvasFont(ctx, theme.labels.text)\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        drawCanvasText(ctx, theme.labels.text, barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            shouldRenderLabel,\n            labelStyle,\n            labelX,\n            labelY,\n            textAnchor,\n        }\n    ) => {\n        ctx.fillStyle = color\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n        roundedRect(ctx, x, y, width, height, Math.min(borderRadius, height))\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n            drawCanvasText(ctx, labelStyle, label, x + labelX, y + labelY)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                setCanvasFont(ctx, theme.text)\n\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        labelStyle: {\n                            ...theme.labels.text,\n                            fill: getLabelColor(bar) as string,\n                        },\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum,\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","_legend$data","legend","jsx","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","_data$fill","_ref$bar","_objectWithoutPropertiesLoose","_excluded","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","textAnchor","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaDisabled","ariaHidden","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","id","index","Text","dominantBaseline","fillOpacity","labels","text","pointerEvents","BarTooltip","BasicTooltip","formattedValue","enableChip","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelPosition","labelOffset","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","tooltipLabel","datum","indexValue","initialHiddenIds","markers","enableTotals","totalsOffset","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","useComputeLabelLayout","computedLabelOffset","gt","other","lt","range","start","end","Array","repeat","_","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","_xScale","d","_yScale","_coerceValue","rawValue","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_yScale3","_xScale2","_coerceValue2","_xScale3","getWidth","generateGroupedBars","_ref3","_scale","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","scaleSpec","clampMin","values","entry","concat","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","flattenDeep","arr","some","isArray","generateVerticalStackedBars","stackedData","stackedDataItem","_getY","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","updateTotalsByIndex","totalsByIndex","currentIndexValue","get","set","updateTotalsPositivesByIndex","totalsPositivesByIndex","updateGreatestValueByIndex","greatestValueByIndex","currentGreatestValue","updateNumberOfBarsByIndex","numberOfBarsByIndex","currentNumberOfBars","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$reverse","_ref$minValue","_ref$maxValue","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_ref$totalsOffset","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","barTotals","totals","Map","_bar$data","totalsPositive","xPosition","yPosition","animationOffset","indexTotal","_bar$data2","greatestValue","numberOfBars","computeBarTotals","BarTotals","springConfig","useTransition","barTotal","enter","update","leave","config","immediate","initial","totalsTransition","fontWeight","fontSize","fontFamily","alignmentBaseline","InnerBar","partialMargin","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$labelPosition","_ref$labelOffset","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","barAriaHidden","barAriaDisabled","_ref$enableTotals","_useMotionConfig","useMotionConfig","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","computeLabelLayout","transition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","_layerById$layer","Bar","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","_ref$renderBar","renderBar","ctx","_ref2$bar","labelStyle","fillStyle","strokeStyle","lineWidth","beginPath","roundedRect","textBaseline","textAlign","drawCanvasText","_ref$pixelRatio","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","_canvasEl$current","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","setCanvasFont","renderLegendToCanvas","renderAnnotationsToCanvas","renderTotalsToCanvas","save","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBarCanvas","ResponsiveWrapper"],"mappings":"iwBAGO,MAAMA,EAAiB,SAAHC,GAAwE,IAAvDC,EAAID,EAAJC,KAAMC,EAAWF,EAAXE,YACxCC,EAAmBC,EAAAA,eAAe,CACpCC,KAAMJ,EACNC,YAAAA,EACAI,YAAa,SAAAC,GAAG,MAAK,CACjBC,EAAGD,EAAIC,EAAID,EAAIE,MAAQ,EACvBC,EAAGH,EAAIG,EAAIH,EAAII,OAAS,EAC1B,EACFC,cAAe,SAAFC,GAAA,IAAKF,EAAME,EAANF,OAAQF,EAAKI,EAALJ,MAAK,MAAQ,CACnCA,MAAAA,EACAE,OAAAA,EACAG,KAAMC,KAAKC,IAAIP,EAAOE,GACzB,IAGL,OACIM,EAAAA,IAAAC,EAAAA,SAAA,CAAAC,SACKhB,EAAiBiB,KAAI,SAACC,EAAYC,GAAC,OAChCL,EAAAA,IAACM,EAAAA,WAAUC,EAAaH,CAAAA,EAAAA,GAAPC,OAIjC,ECfaG,EAAa,SAAHzB,GAAA,IAAMS,EAAKT,EAALS,MAAOE,EAAMX,EAANW,OAAQe,EAAO1B,EAAP0B,QAASC,EAAW3B,EAAX2B,YAAW,OAC5DV,EAAAA,IAAAC,EAAAA,SAAA,CAAAC,SACKO,EAAQN,KAAI,SAAAP,EAAiBS,GAAC,IAAAM,EAAhBC,EAAMhB,EAAA,GAAER,EAAIQ,EAAA,GAAA,OACvBI,EAAAa,IAACC,EAAYA,aAAAP,KAELK,EAAM,CACVG,eAAgBvB,EAChBwB,gBAAiBtB,EACjBN,KAAiB,OAAbuB,EAAEC,EAAOxB,MAAIuB,EAAIvB,EACrBsB,YACIE,EAAOF,aAAmC,SAApBE,EAAOK,SAAsBP,OAAcQ,IANhEb,OAUd,aCjBMc,EAAU,SAAHpC,GAmCU,IAAAqC,EAAAC,EAAAtC,EAlC1BO,IAAOF,EAAIiC,EAAJjC,KAASE,EAAGgC,EAAAD,EAAAE,GAAAC,EAAAzC,EAEnB0C,MACIC,EAAWF,EAAXE,YACAC,EAAKH,EAALG,MACAjC,EAAM8B,EAAN9B,OACAkC,EAAUJ,EAAVI,WACAC,EAAYL,EAAZK,aACAC,EAAMN,EAANM,OACAC,EAAMP,EAANO,OACAC,EAASR,EAATQ,UACAxC,EAAKgC,EAALhC,MACAyC,EAAUT,EAAVS,WAGJC,EAAYnD,EAAZmD,aACAC,EAAWpD,EAAXoD,YAEAC,EAAKrD,EAALqD,MACAC,EAAiBtD,EAAjBsD,kBAEAC,EAAavD,EAAbuD,cACAC,EAAOxD,EAAPwD,QACAC,EAAYzD,EAAZyD,aACAC,EAAY1D,EAAZ0D,aAEAC,EAAO3D,EAAP2D,QAEAC,EAAW5D,EAAX4D,YACAC,EAAS7D,EAAT6D,UACAC,EAAc9D,EAAd8D,eACAC,EAAe/D,EAAf+D,gBACAC,EAAYhE,EAAZgE,aACAC,EAAUjE,EAAViE,WAEMC,EAAQC,EAAAA,WACdC,EAA6DC,EAAAA,aAArDC,EAAoBF,EAApBE,qBAAsBC,EAAaH,EAAbG,cAAeC,EAAWJ,EAAXI,YAEvCC,EAAgBC,EAAAA,SAClB,WAAA,OAAM,WAAA,OAAMC,EAAAA,cAAchB,EAAOnC,KAAOjB,EAAQF,GAAO,CAAA,GACvD,CAACsD,EAASpD,EAAKF,IAGbuE,EAAcC,eAChB,SAACC,GACU,MAAPtB,GAAAA,EAAOhC,EAAA,CAAKoB,MAAOrC,EAAIqC,OAAUvC,GAAQyE,EAC5C,GACD,CAACvE,EAAKF,EAAMmD,IAEVuB,EAAgBF,eAClB,SAACC,GAAiC,OAAKR,EAAqBG,IAAiBK,EAAM,GACnF,CAACR,EAAsBG,IAErBO,EAAmBH,eACrB,SAACC,SACGrB,GAAAA,EAAepD,EAAMyE,GACrBR,EAAqBG,IAAiBK,EACzC,GACD,CAACzE,EAAMoD,EAAca,EAAsBG,IAEzCQ,EAAmBJ,eACrB,SAACC,SACGpB,GAAAA,EAAerD,EAAMyE,GACrBN,GACH,GACD,CAACnE,EAAMmE,EAAad,IAIlBwB,EAAcL,EAAAA,aAAY,WAC5BN,EAAcE,IAAiB,CAAClE,EAAI4E,KAAO5E,EAAIE,MAAQ,EAAGF,EAAI6E,MACjE,GAAE,CAACb,EAAeE,EAAelE,IAC5B8E,EAAaR,EAAAA,aAAY,WAC3BL,GACJ,GAAG,CAACA,IAEJ,OACIc,EAAAC,KAACC,EAAQA,SAACC,EAAC,CAACxC,UAAWA,EAAU9B,SAC7BF,CAAAA,EAAAA,IAACuE,EAAQA,SAACE,KAAI,CACVjF,MAAOkF,EAAEA,GAAClF,GAAO,SAAAmF,GAAK,OAAI7E,KAAKC,IAAI4E,EAAO,MAC1CjF,OAAQgF,EAAEA,GAAChF,GAAQ,SAAAiF,GAAK,OAAI7E,KAAKC,IAAI4E,EAAO,MAC5CC,GAAI1C,EACJ2C,GAAI3C,EACJ4C,KAAe,OAAX1D,EAAEhC,EAAK0F,MAAI1D,EAAIO,EACnBoD,YAAa5C,EACb6C,OAAQtD,EACRuD,UAAWtC,EACXuC,SAAUvC,EAAc,OAAIzB,EAC5B,aAAY0B,EAAYA,EAAUxD,QAAQ8B,EAC1C,kBAAiB2B,EAAiBA,EAAezD,QAAQ8B,EACzD,mBAAkB4B,EAAkBA,EAAgB1D,QAAQ8B,EAC5D,gBAAe6B,EAAeA,EAAa3D,QAAQ8B,EACnD,cAAa8B,EAAaA,EAAW5D,QAAQ8B,EAC7CsB,aAAcF,EAAgByB,OAAmB7C,EACjDiE,YAAa7C,EAAgBwB,OAAgB5C,EAC7CuB,aAAcH,EAAgB0B,OAAmB9C,EACjDqB,QAASD,EAAgBqB,OAAczC,EACvCkE,QAAS9C,GAAiBK,EAAcsB,OAAc/C,EACtDmE,OAAQ/C,GAAiBK,EAAcyB,OAAalD,EACpD,cAAA,YAAyB9B,EAAKkG,GAAE,IAAIlG,EAAKmG,QAE5ClD,GACGrC,EAAAa,IAAC2E,OAAI,CACDjG,EAAGuC,EACHrC,EAAGsC,EACHE,WAAYA,EACZwD,iBAAiB,UACjBC,YAAa7D,EACbJ,MAAKlB,EAAA,CAAA,EACE0C,EAAM0C,OAAOC,KAAI,CAEpBC,cAAe,OACff,KAAMlD,IACR1B,SAEDkC,MAKrB,sBC7Ha0D,EAAa,SAAH/G,GAAwE,IAAvD4C,EAAK5C,EAAL4C,MAAOS,EAAKrD,EAALqD,MAAUhD,EAAIkC,EAAAvC,EAAAwC,GACzD,OAAOvB,EAAAA,IAAC+F,EAAAA,aAAY,CAACT,GAAIlD,EAAOuC,MAAOvF,EAAK4G,eAAgBC,YAAY,EAAMtE,MAAOA,GACzF,ECCauE,EAAe,CACxBC,QAAS,KACTC,KAAM,CAAC,SAEPC,UAAW,UACXC,OAAQ,WACRC,SAAS,EAETC,SAAU,OACVC,SAAU,OAEVC,WAAY,CAAEC,KAAM,UACpBC,WAAY,CAAED,KAAM,OAAQE,OAAO,GAEnCC,QAAS,GACTC,aAAc,EAEdC,WAAY,CAAE,EACdC,SAAU,CAAE,EACZC,aAAa,EACbC,aAAa,EAEbC,aAAa,EACbhF,MAAO,iBACPiF,cAAe,SACfC,YAAa,EACbC,eAAgB,EAChBC,gBAAiB,EACjBC,eAAgB,CAAEC,KAAM,QAASzE,MAAO,oBAExC0E,QAAS,KACTC,OAAQ,CAAEC,OAAQ,QAElB3F,aAAc,EACdC,YAAa,EACbT,YAAa,CAAEgG,KAAM,SAErBpF,eAAe,EACfI,QAASoD,EACTgC,aAAc,SAAWC,GAA8B,OAAQA,EAAMzC,GAAQyC,MAAAA,EAAMC,UAAY,EAE/FvH,QAAS,GACTwH,iBAAkB,GAClBhJ,YAAa,GACbiJ,QAAS,GAETC,cAAc,EACdC,aAAc,IAGLC,EAAe9H,KACrB2F,EAAY,CACfoC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,SAAU,UAAW,UAAW,eACjEC,aAAcpH,EAEdqH,KAAM,GACN1D,KAAM,GAEN2D,SAAS,EACTC,aAAc,UAEdC,KAAM,MACNhG,aAAa,IAGJiG,EAAkBrI,KACxB2F,EAAY,CACfoC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,SAAU,UAAW,eAEtDO,WAA8B,oBAAXC,QAAiD,OAA3BC,EAAID,OAAOE,kBAAgBD,EAAS,ICpEpEE,EAAgB,SACzB7J,EACA8J,EACApC,EACAF,EACA/G,EACAsJ,GAEA,OACIC,EAAAA,aACIxC,EACA,CAAEyC,IAAKjK,EAAKe,IAAI+I,GAAWI,IAAK,EAAGvJ,IAAK,GACxCF,EACAsJ,GAENrC,QAAQA,EACd,EAKayC,EAAgB,SAAWnK,EAA2BgH,GAAuB,OACtFhH,EAAKe,KACD,SAAAqJ,GAAI,OAAAjJ,EAEO6F,CAAAA,EAAAA,EAAKqD,QAAgC,SAACC,EAAKC,GAE1C,OADAD,EAAIC,GAAO,KACJD,CACX,GAAG,CAAE,GACFF,EAAI,GAElB,EAEQI,EAAmB,SAA2CxK,GAAc,OACrFyK,OAAOzD,KAAKhH,GAAMqK,QAAgC,SAACC,EAAKC,GAIpD,OAHIvK,EAAKuK,KACLD,EAAIC,GAAOvK,EAAKuK,IAEbD,CACV,GAAE,CAAE,EAAC,EAEGI,EAAc,SAAInF,GAAQ,MAAK,CAACA,EAAOoF,OAAOpF,GAAO,EAW3D,SAASqF,EACZ1D,EACAC,EACAc,EACAC,GAEA,YAL0C,IAA1ChB,IAAAA,EAA6CJ,EAAaI,aACd,IAA5CC,IAAAA,EAA+CL,EAAaK,cACJ,IAAxDc,IAAAA,EAA2DnB,EAAamB,oBACpB,IAApDC,IAAAA,EAAuDpB,EAAaoB,aAE7D,SAAC9H,EAAeE,GAEnB,IAAMuK,EAAsB3C,GAAef,GAAW,EAAI,GAE1D,GAAe,eAAXD,EAAyB,CACzB,IAAI/G,EAAIC,EAAQ,EAMhB,MALsB,UAAlB6H,EACA9H,EAAIgH,EAAU/G,EAAQ,EACG,QAAlB6H,IACP9H,EAAIgH,EAAU,EAAI/G,GAEf,CACHsC,OAAQvC,EAAI0K,EACZlI,OAAQrC,EAAS,EACjBuC,WAA8B,WAAlBoF,EAA6B,SAAWd,EAAU,MAAQ,QAE9E,CACI,IAAI9G,EAAIC,EAAS,EAMjB,MALsB,UAAlB2H,EACA5H,EAAI8G,EAAU,EAAI7G,EACO,QAAlB2H,IACP5H,EAAI8G,EAAU7G,EAAS,GAEpB,CACHoC,OAAQtC,EAAQ,EAChBuC,OAAQtC,EAAIwK,EACZhI,WAAY,UAI5B,kIC5EMiI,EAAK,SAACvF,EAAewF,GAAa,OAAKxF,EAAQwF,CAAK,EACpDC,EAAK,SAACzF,EAAewF,GAAa,OAAKxF,EAAQwF,CAAK,EAEpDE,EAAQ,SAACC,EAAeC,GAAW,OACrCC,MAAM9C,KAAK,IAAI+C,OAAOF,EAAMD,IAAQ,SAACI,EAAGnF,GAAK,OAAK+E,EAAQ/E,IAAM,EAE9DoF,EAAc,SAAChG,GAAa,OAAMuF,EAAGvF,EAAO,GAAK,EAAIA,CAAK,EAM1DiG,EAA8B,SAAH7L,EAa7B8L,EACAtE,EACAuE,GAC+B,IAd3B1L,EAAIL,EAAJK,KACA2L,EAAWhM,EAAXgM,YACAC,EAAQjM,EAARiM,SACA9B,EAAQnK,EAARmK,SACA+B,EAAelM,EAAfkM,gBAAeC,EAAAnM,EACfgI,aAAAA,OAAe,IAAHmE,EAAG,EAACA,EAChB9E,EAAIrH,EAAJqH,KACA+E,EAAMpM,EAANoM,OACAC,EAAMrM,EAANqM,OACAC,EAAMtM,EAANsM,OAMEC,EAAU/E,EAAU6D,EAAKF,EAGzBqB,EAAcnM,EAAKe,IAAIyJ,GAEvB5K,EAAqC,GAkC3C,OAjCAoH,EAAKoF,SAAQ,SAAC7B,EAAKtJ,GAAC,OAChBgK,EAAM,EAAGc,EAAOM,SAASC,QAAQF,SAAQ,SAAAjG,GAAS,IAAAoG,EANxCC,EAASC,EAOfC,EAA0BhC,EAAY1K,EAAKmG,GAAOoE,IAA3CoC,EAAQD,EAAA,GAAEnH,EAAKmH,EAAA,GAChB9D,EAAakB,EAAS9J,EAAKmG,IAC3BhG,GAAuB,OAAnBoM,EAACR,EAAOnD,IAAW2D,EAAI,GAAKd,EAAWxK,EAAI0G,EAAe1G,EAC9DZ,EAVe6L,EAAfM,EAUSjH,EAViB,GAAe,OAAbkH,EAAIT,EAAOQ,IAAEC,EAAI,EAAKf,EAWlDkB,EAVI,SAACJ,EAAWnM,GAAS,IAAAwM,EAAA,OAAMX,EAAQM,EAAG,GAAKd,EAAOrL,UAAIwM,EAACb,EAAOQ,IAAEK,EAAI,GAAKnB,EAUjEoB,CAAUvH,EAAOlF,GAC7B0M,EAAmC,CACrC7G,GAAIqE,EACJhF,MAAoB,OAAboH,EAAoBA,EAAWpH,EACtCqB,eAAgB+E,EAAYpG,GAC5ByH,QAAQ,EACR7G,MAAAA,EACAyC,WAAAA,EACA5I,KAAMmM,EAAYhG,IAGtBvG,EAAKqN,KAAK,CACN1C,IAAQA,EAAOwC,IAAAA,EAAQnE,WACvBzC,MAAOvG,EAAK0M,OACZtM,KAAM+M,EACN5M,EAAAA,EACAE,EAAAA,EACAyE,KAAMmH,EAAOiB,KAAO/M,EACpB4E,KAAMkH,EAAOkB,IAAM9M,EACnBD,MAAOqL,EACPnL,OAAQsM,EACRrK,MAAOqJ,EAASmB,GAChB/J,MAAO6I,EAAgBkB,IAE/B,GAAE,IAGCnN,CACX,EAKMwN,EAAgC,SAAH5M,EAa/BoM,EACAzF,EACAkG,GAC+B,IAd3BrN,EAAIQ,EAAJR,KACA2L,EAAWnL,EAAXmL,YACA7B,EAAQtJ,EAARsJ,SACA8B,EAAQpL,EAARoL,SACAC,EAAerL,EAAfqL,gBACA7E,EAAIxG,EAAJwG,KAAIsG,EAAA9M,EACJmH,aAAAA,OAAe,IAAH2F,EAAG,EAACA,EAChBvB,EAAMvL,EAANuL,OACAC,EAAMxL,EAANwL,OACAC,EAAMzL,EAANyL,OAMEC,EAAU/E,EAAU6D,EAAKF,EAGzBqB,EAAcnM,EAAKe,IAAIyJ,GAEvB5K,EAAqC,GAkC3C,OAjCAoH,EAAKoF,SAAQ,SAAC7B,EAAKtJ,GAAC,OAChBgK,EAAM,EAAGe,EAAOK,SAASC,QAAQF,SAAQ,SAAAjG,GAAS,IAAAoH,EANxCf,EAASgB,EAOfC,EAA0B/C,EAAY1K,EAAKmG,GAAOoE,IAA3CoC,EAAQc,EAAA,GAAElI,EAAKkI,EAAA,GAChB7E,EAAakB,EAAS9J,EAAKmG,IAC3BhG,EATe+L,EAAfM,EASSjH,EATiB,GAAK8H,EAAiBG,OAAbA,EAAIzB,EAAOS,IAAEgB,EAAI,EAUpDnN,GAAuB,OAAnBkN,EAACvB,EAAOpD,IAAW2E,EAAI,GAAKX,EAAY3L,EAAI0G,EAAe1G,EAC/DwK,EAVG,SAACe,EAAWrM,GAAS,IAAAuN,EAAA,OAAMxB,EAAQM,EAAG,IAAekB,OAAVA,EAAC3B,EAAOS,IAAEkB,EAAI,GAAKL,EAAOA,EAAOlN,EAUpEwN,CAASpI,EAAOpF,GAC3B4M,EAAmC,CACrC7G,GAAIqE,EACJhF,MAAoB,OAAboH,EAAoBA,EAAWpH,EACtCqB,eAAgB+E,EAAYpG,GAC5ByH,QAAQ,EACR7G,MAAAA,EACAyC,WAAAA,EACA5I,KAAMmM,EAAYhG,IAGtBvG,EAAKqN,KAAK,CACN1C,IAAQA,EAAOwC,IAAAA,EAAQnE,WACvBzC,MAAOvG,EAAK0M,OACZtM,KAAM+M,EACN5M,EAAAA,EACAE,EAAAA,EACAyE,KAAMmH,EAAOiB,KAAO/M,EACpB4E,KAAMkH,EAAOkB,IAAM9M,EACnBD,MAAOqL,EACPnL,OAAQsM,EACRrK,MAAOqJ,EAASmB,GAChB/J,MAAO6I,EAAgBkB,IAE/B,GAAE,IAGCnN,CACX,EAKagO,EAAsB,SAAHC,GAkC1B,IAAAC,EAnKmBvI,EAkIrB2B,EAAM2G,EAAN3G,OACAE,EAAQyG,EAARzG,SACAC,EAAQwG,EAARxG,SACAF,EAAO0G,EAAP1G,QACA/G,EAAKyN,EAALzN,MACAE,EAAMuN,EAANvN,OAAMyN,EAAAF,EACNnG,QAAAA,OAAU,IAAHqG,EAAG,EAACA,EAAAC,EAAAH,EACXlG,aAAAA,OAAe,IAAHqG,EAAG,EAACA,EAChB1G,EAAUuG,EAAVvG,WACY2G,EAAgBJ,EAA5BrG,WAAU0G,EAAAL,EACVM,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EACXE,EAAKlM,EAAA2L,EAAA1L,GAuBF6E,EAAOoH,EAAMpH,KAAKqH,QAAO,SAAA9D,GAAG,OAAK4D,EAAUG,SAAS/D,MACpDvK,EAAOmK,EAAciE,EAAMpO,KAAMgH,GACvCuH,EACe,aAAXrH,EAAyB,CAAC,IAAK,IAAK9G,GAAoB,CAAC,IAAK,IAAKE,GADhEyJ,EAAIwE,EAAA,GAAEC,EAASD,EAAA,GAAE9N,EAAI8N,EAAA,GAEtB/G,EAAaqC,EACf7J,EACAoO,EAAMtE,SACNpC,EACAuG,EACAxN,EACA+N,GAGEC,EAAStN,EAAA,CACXR,IAAK0G,EACL6C,IAAK9C,EACLD,QAAAA,GACGG,GAGDoH,EAA6B,SAAlBD,EAAUvE,IAAiBqB,EAAc,SAAChG,GAAa,OAAKA,CAAK,EAE5EoJ,EAAS3O,EACVqK,QAAiB,SAACC,EAAKsE,GAAK,MAAAC,GAAAA,OAASvE,EAAQtD,EAAKjG,KAAI,SAAA+N,GAAC,OAAIF,EAAME,EAAY,IAAE,GAAE,IACjFT,OAAOU,SACN7E,EAAMwE,EAAShO,KAAKwJ,IAAG8E,MAARtO,KAAYiO,IAC3BhO,GA9Le4E,EA8LO7E,KAAKC,IAAGqO,MAARtO,KAAYiO,GA9LAM,SAAS1J,GAASA,EAAQ,GAgM5D2J,EAAQlF,EAAYA,aACtByE,EACA,CAAExE,IAAK0E,EAAQzE,IAAAA,EAAKvJ,IAAAA,GACX,MAAToJ,EAAe3J,EAAQE,EACvByJ,GAGJoF,EAAoC,aAAXjI,EAAwB,CAACM,EAAY0H,GAAS,CAACA,EAAO1H,GAAxEuE,EAAMoD,EAAA,GAAEnD,EAAMmD,EAAA,GAEfC,GAAa5H,EAAW4H,YAAczH,GAAgBX,EAAKsF,OAAS,IAAMtF,EAAKsF,OAC/E+C,EAAS,CAAAlO,KACNiN,EAAK,CAAEpO,KAAAA,EAAMgH,KAAAA,EAAMW,aAAAA,EAAcoE,OAAAA,EAAQC,OAAAA,IAC9CoD,EACAX,EAAUtH,QACF,OADS2G,EACjBoB,EAAM,IAAEpB,EAAI,GAUhB,MAAO,CAAE/B,OAAAA,EAAQC,OAAAA,EAAQpM,KANrBwP,EAAY,EACK,aAAXlI,EACIsE,EAA2BwD,WAAIK,EAAAA,GAC/BjC,EAA6B4B,WAAIK,EAAAA,GACrC,GAGd,uHC9NMC,EAAc,SAAIC,GAAQ,IAAA5P,EAAA,OAC5B4P,EAAIC,KAAKpE,MAAMqE,SAAWH,GAAY3P,EAAC,IAAWkP,OAAMG,MAAArP,EAAI4P,IAASA,CAAoB,EAQvFG,EAA8B,SAAHlP,EAY7BiL,EACAtE,GAC+B,IAZ3BwE,EAAWnL,EAAXmL,YACAC,EAAQpL,EAARoL,SACA9B,EAAQtJ,EAARsJ,SACA+B,EAAerL,EAAfqL,gBACAlE,EAAYnH,EAAZmH,aACAgI,EAAWnP,EAAXmP,YACA5D,EAAMvL,EAANuL,OACAC,EAAMxL,EAANwL,OACAC,EAAMzL,EAANyL,OAQErM,EAAqC,GAmC3C,OAlCA+P,EAAYvD,SAAQ,SAAAwD,GAAe,OAC/B7D,EAAOM,SAASD,SAAQ,SAACjG,EAAOlF,GAAM,IAAAsL,EAAAsD,EAC5BrD,EAAIoD,EAAgB3O,GACpBd,EAA4BoM,OAA3BA,EAAGR,EAAOjC,EAAS0C,EAAExM,QAAMuM,EAAI,EAChClM,GAAY,OAARwP,EARL,SAACrD,GAAuB,OAAKR,EAAOQ,EAAErF,EAAU,EAAI,GAAG,CAQjD2I,CAAKtD,IAAEqD,EAAI,GAAoB,GAAflI,EACrBiF,EARI,SAACJ,EAAyBnM,GAAS,IAAAoM,EAAA,OAAgC,OAA3BA,EAACT,EAAOQ,EAAErF,EAAU,EAAI,KAAGsF,EAAI,GAAKpM,CAAC,CAQrEyM,CAAUN,EAAGnM,GAAKsH,EACpC+E,EAA0BhC,EAAY8B,EAAExM,KAAK4P,EAAgBrF,MAAtDoC,EAAQD,EAAA,GAAEnH,EAAKmH,EAAA,GAEhBK,EAAmC,CACrC7G,GAAI0J,EAAgBrF,IACpBhF,MAAoB,OAAboH,EAAoBA,EAAWpH,EACtCqB,eAAgB+E,EAAYpG,GAC5ByH,QAAQ,EACR7G,MAAOlF,EACP2H,WAAYzC,EACZnG,KAAMwK,EAAiBgC,EAAExM,OAG7BJ,EAAKqN,KAAK,CACN1C,IAAQqF,EAAgBrF,QAAOpE,EAC/BA,MAAOvG,EAAK0M,OACZtM,KAAM+M,EACN5M,EAAAA,EACAE,EAAAA,EACAyE,KAAMmH,EAAOiB,KAAO/M,EACpB4E,KAAMkH,EAAOkB,IAAM9M,EACnBD,MAAOqL,EACPnL,OAAQsM,EACRrK,MAAOqJ,EAASmB,GAChB/J,MAAO6I,EAAgBkB,IAE/B,GAAE,IAGCnN,CACX,EAKMmQ,EAAgC,SAAHlC,EAY/BjB,EACAzF,GAC+B,IAZ3BwE,EAAWkC,EAAXlC,YACAC,EAAQiC,EAARjC,SACA9B,EAAQ+D,EAAR/D,SACA+B,EAAegC,EAAfhC,gBACAlE,EAAYkG,EAAZlG,aACAgI,EAAW9B,EAAX8B,YACA5D,EAAM8B,EAAN9B,OACAC,EAAM6B,EAAN7B,OACAC,EAAM4B,EAAN5B,OAQErM,EAAqC,GAmC3C,OAlCA+P,EAAYvD,SAAQ,SAAAwD,GAAe,OAC/B5D,EAAOK,SAASD,SAAQ,SAACjG,EAAOlF,GAAM,IAAA4L,EAAAmD,EAC5BxD,EAAIoD,EAAgB3O,GACpBZ,EAA4BwM,OAA3BA,EAAGb,EAAOlC,EAAS0C,EAAExM,QAAM6M,EAAI,EAChC1M,GAAY,OAAR6P,EARL,SAACxD,GAAuB,OAAKT,EAAOS,EAAErF,EAAU,EAAI,GAAG,CAQjD8I,CAAKzD,IAAEwD,EAAI,GAAoB,GAAfrI,EACrB8D,EARG,SAACe,EAAyBrM,GAAS,IAAAqN,EAAA,OAAgC,OAA3BA,EAACzB,EAAOS,EAAErF,EAAU,EAAI,KAAGqG,EAAI,GAAKrN,CAAC,CAQrEwN,CAASnB,EAAGrM,GAAKwH,EAClC8F,EAA0B/C,EAAY8B,EAAExM,KAAK4P,EAAgBrF,MAAtDoC,EAAQc,EAAA,GAAElI,EAAKkI,EAAA,GAEhBV,EAAmC,CACrC7G,GAAI0J,EAAgBrF,IACpBhF,MAAoB,OAAboH,EAAoBA,EAAWpH,EACtCqB,eAAgB+E,EAAYpG,GAC5ByH,QAAQ,EACR7G,MAAOlF,EACP2H,WAAYzC,EACZnG,KAAMwK,EAAiBgC,EAAExM,OAG7BJ,EAAKqN,KAAK,CACN1C,IAAQqF,EAAgBrF,QAAOpE,EAC/BA,MAAOvG,EAAK0M,OACZtM,KAAM+M,EACN5M,EAAAA,EACAE,EAAAA,EACAyE,KAAMmH,EAAOiB,KAAO/M,EACpB4E,KAAMkH,EAAOkB,IAAM9M,EACnBD,MAAOqL,EACPnL,OAAQsM,EACRrK,MAAOqJ,EAASmB,GAChB/J,MAAO6I,EAAgBkB,IAE/B,GAAE,IAGCnN,CACX,EAKasQ,EAAsB,SAAH3B,GAkC1B,IA9JoB4B,EA6HtBnQ,EAAIuO,EAAJvO,KACAkH,EAAMqH,EAANrH,OACAE,EAAQmH,EAARnH,SACAC,EAAQkH,EAARlH,SACAF,EAAOoH,EAAPpH,QACA/G,EAAKmO,EAALnO,MACAE,EAAMiO,EAANjO,OAAM8P,EAAA7B,EACN7G,QAAAA,OAAU,IAAH0I,EAAG,EAACA,EACX9I,EAAUiH,EAAVjH,WACY2G,EAAgBM,EAA5B/G,WAAU6I,EAAA9B,EACVJ,UAAAA,OAAY,IAAHkC,EAAG,GAAEA,EACXjC,EAAKlM,EAAAqM,EAAApM,GAuBF6E,EAAOoH,EAAMpH,KAAKqH,QAAO,SAAA9D,GAAG,OAAK4D,EAAUG,SAAS/D,MACpDoF,EAAcW,EAAAA,QAA0BtJ,KAAKA,GAAMuJ,OAAOC,EAAAA,qBAA5CF,CAChBnG,EAAcnK,EAAMgH,IAGxBmI,EACe,aAAXjI,EAAyB,CAAC,IAAK,IAAK9G,GAAoB,CAAC,IAAK,IAAKE,GADhEyJ,EAAIoF,EAAA,GAAEX,EAASW,EAAA,GAAE1O,EAAI0O,EAAA,GAEtB3H,EAAaqC,EACf7J,EACAoO,EAAMtE,SACNpC,EACAuG,EACAxN,EACA+N,GAGEC,EAAStN,EAAA,CACXR,IAAK0G,EACL6C,IAAK9C,EACLD,QAAAA,GACGG,GAGDqH,GAtLgBwB,EAuLlBb,EAAYK,GAtLP,QAuLLrI,EAAWC,KAvLE4I,EAAM9B,QAAO,SAAAoC,GAAG,OAAY,IAARA,CAAS,IAAIN,GAyL5CjG,EAAMxJ,KAAKwJ,IAAG8E,MAARtO,KAAYiO,GAClBhO,EAAMD,KAAKC,IAAGqO,MAARtO,KAAYiO,GAElBO,EAAQlF,EAAYA,aACtByE,EACA,CAAExE,IAAK0E,EAAQzE,IAAAA,EAAKvJ,IAAAA,GACX,MAAToJ,EAAe3J,EAAQE,EACvByJ,GAGJ2G,EAAoC,aAAXxJ,EAAwB,CAACM,EAAY0H,GAAS,CAACA,EAAO1H,GAAxEuE,EAAM2E,EAAA,GAAE1E,EAAM0E,EAAA,GAEf/I,EAAeyG,EAAMzG,aAAe,EAAIyG,EAAMzG,aAAe,EAC7DyH,EAAY5H,EAAW4H,YACvBC,EAAS,CAAAlO,KACNiN,EAAK,CAAEzG,aAAAA,EAAcgI,YAAAA,EAAa5D,OAAAA,EAAQC,OAAAA,IAC/CoD,EACAX,EAAUtH,SAUd,MAAO,CAAE4E,OAAAA,EAAQC,OAAAA,EAAQpM,KANrBwP,EAAY,EACK,aAAXlI,EACIwI,EAA2BV,WAAIK,EAAAA,GAC/BU,EAA6Bf,WAAIK,EAAAA,GACrC,GAGd,EC9KasB,EAAgB,SAAH9C,GAapB,IAZFjO,EAAIiO,EAAJjO,KACAgR,EAAS/C,EAAT+C,UACAtI,EAAIuF,EAAJvF,KACArB,EAAS4G,EAAT5G,UACAC,EAAM2G,EAAN3G,OACA2J,EAAWhD,EAAXgD,YACA1J,EAAO0G,EAAP1G,QAOM2J,EAAiBC,sBACnBF,MAAAA,EAAAA,EAAyB,YAATvI,EAAqB,aAAe,MAGxD,MAAa,YAATA,EAxC+B,SACnC1I,EACAsH,EACA4J,GAEA,IAAM9Q,EAAOgR,EACTpR,EAAKmB,KAAI,SAAAb,GAAG,IAAA+Q,EAAAC,EAAA,MAAK,CACbhL,GAAuB,OAArB+K,EAAE/Q,EAAIF,KAAK4I,YAAUqI,EAAI,GAC3BjO,MAAO8N,EAAe5Q,EAAIF,MAC1BgN,OAAQ9M,EAAIF,KAAKgN,OACjBzK,MAAgB,OAAX2O,EAAEhR,EAAIqC,OAAK2O,EAAI,YAExB,SAAA1Q,GAAK,OAAAA,EAAF0F,EAAW,IAOlB,MAJe,eAAXgB,GACAlH,EAAKmH,UAGFnH,CACX,CAqBemR,CAAwBvR,EAAMsH,EAAQ4J,GAxEjB,SAChClR,EACAsH,EACA0J,EACA3J,EACAE,EACA2J,GAEA,IAAM9Q,EAAOgR,EACTpR,EAAKmB,KAAI,SAAAb,GAAG,IAAAkR,EAAA,MAAK,CACblL,GAAIhG,EAAIF,KAAKkG,GACblD,MAAO8N,EAAe5Q,EAAIF,MAC1BgN,OAAQ9M,EAAIF,KAAKgN,OACjBzK,MAAgB,OAAX6O,EAAElR,EAAIqC,OAAK6O,EAAI,YAExB,SAAAzR,GAAK,OAAAA,EAAFuG,EAAW,IAalB,OATgB,aAAXgB,GACiB,YAAdD,GACc,WAAd2J,IACY,IAAZzJ,GACQ,eAAXD,GAAyC,YAAdD,IAAuC,IAAZE,IAEvDnH,EAAKmH,UAGFnH,CACX,CA8CWqR,CAAqBzR,EAAMsH,EAAQ0J,EAAW3J,EAAWE,EAAS2J,EAC7E,EC+BaQ,EAAsB,SAC/BC,EACA3I,EACArD,GAEA,IAAMiM,EAAoBD,EAAcE,IAAI7I,IAAe,EAC3D2I,EAAcG,IAAI9I,EAAY4I,EAAoBjM,EACtD,EAGaoM,EAA+B,SACxCC,EACAhJ,EACArD,GAEA,IAAMiM,EAAoBI,EAAuBH,IAAI7I,IAAe,EACpEgJ,EAAuBF,IAAI9I,EAAY4I,GAAqBjM,EAAQ,EAAIA,EAAQ,GACpF,EAGasM,EAA6B,SACtCC,EACAlJ,EACArD,GAEA,IAAMwM,EAAuBD,EAAqBL,IAAI7I,IAAe,EACrEkJ,EAAqBJ,IAAI9I,EAAYlI,KAAKC,IAAIoR,EAAsBpH,OAAOpF,IAC/E,EAGayM,EAA4B,SACrCC,EACArJ,GAEA,IAAMsJ,EAAsBD,EAAoBR,IAAI7I,IAAe,EACnEqJ,EAAoBP,IAAI9I,EAAYsJ,EAAsB,EAC9D,EC1IaC,EAAS,SAAHxS,GA4Db,IAAAyS,EAAAzS,EA3DFoH,QAAAA,OAAO,IAAAqL,EAAGtL,EAAaC,QAAOqL,EAAAC,EAAA1S,EAC9BqH,KAAAA,OAAI,IAAAqL,EAAGvL,EAAaE,KAAIqL,EAAAC,EAAA3S,EACxBqD,MAAAA,OAAK,IAAAsP,EAAGxL,EAAa9D,MAAKsP,EAAAC,EAAA5S,EAC1B+I,aAAAA,OAAY,IAAA6J,EAAGzL,EAAa4B,aAAY6J,EACxCC,EAAW7S,EAAX6S,YAAWC,EAAA9S,EACX6I,OAAAA,OAAM,IAAAiK,EAAG3L,EAAa0B,OAAMiK,EAAAC,EAAA/S,EAC5B4I,QAAAA,OAAO,IAAAmK,EAAG5L,EAAayB,QAAOmK,EAAAC,EAAAhT,EAC9B2C,YAAAA,OAAW,IAAAqQ,EAAG7L,EAAaxE,YAAWqQ,EAAAC,EAAAjT,EACtC0I,eAAAA,OAAc,IAAAuK,EAAG9L,EAAauB,eAAcuK,EAAAC,EAAAlT,EAC5CsH,UAAAA,OAAS,IAAA4L,EAAG/L,EAAaG,UAAS4L,EAAAC,EAAAnT,EAClCuH,OAAAA,OAAM,IAAA4L,EAAGhM,EAAaI,OAAM4L,EAAAC,EAAApT,EAC5BwH,QAAAA,OAAO,IAAA4L,EAAGjM,EAAaK,QAAO4L,EAC9B/S,EAAIL,EAAJK,KAAIgT,EAAArT,EACJyH,SAAAA,OAAQ,IAAA4L,EAAGlM,EAAaM,SAAQ4L,EAAAC,EAAAtT,EAChC0H,SAAAA,OAAQ,IAAA4L,EAAGnM,EAAaO,SAAQ4L,EAChChH,EAAMtM,EAANsM,OACA7L,EAAKT,EAALS,MACAE,EAAMX,EAANW,OAAM4S,EAAAvT,EACN+H,QAAAA,OAAO,IAAAwL,EAAGpM,EAAaY,QAAOwL,EAAApH,EAAAnM,EAC9BgI,aAAAA,OAAY,IAAAmE,EAAGhF,EAAaa,aAAYmE,EAAAqH,EAAAxT,EACxC2H,WAAAA,OAAU,IAAA6L,EAAGrM,EAAaQ,WAAU6L,EAAAC,EAAAzT,EACpC6H,WAAAA,OAAU,IAAA4L,EAAGtM,EAAaU,WAAU4L,EAAAC,EAAA1T,EACpCkJ,iBAAAA,QAAgB,IAAAwK,EAAGvM,EAAa+B,iBAAgBwK,EAAAC,GAAA3T,EAChDqI,YAAAA,QAAW,IAAAsL,GAAGxM,EAAakB,YAAWsL,GAAAC,GAAA5T,EACtCwI,eAAAA,QAAc,IAAAoL,GAAGzM,EAAaqB,eAAcoL,GAAAC,GAAA7T,EAC5CyI,gBAAAA,QAAe,IAAAoL,GAAG1M,EAAasB,gBAAeoL,GAAAC,GAAA9T,EAC9C0B,QAAAA,QAAO,IAAAoS,GAAG3M,EAAazF,QAAOoS,GAC9B5C,GAAWlR,EAAXkR,YAAW6C,GAAA/T,EACXqJ,aAAAA,QAAY,IAAA0K,GAAG5M,EAAakC,aAAY0K,GAgCxCC,GAAkCC,EAAAA,SAAS/K,MAAAA,GAAAA,GAAoB,IAAxDsF,GAASwF,GAAA,GAAEE,GAAYF,GAAA,GACxBrS,GAAckD,eAAY,SAAC0B,GAC7B2N,IAAa,SAAAC,GAAK,OACdA,EAAMC,QAAQ7N,IAAO,EAAI4N,EAAMzF,QAAO,SAAAjE,GAAI,OAAIA,IAASlE,CAAE,OAAC2I,OAAOiF,EAAK,CAAE5N,GAAG,GAElF,GAAE,IAEG4D,GAAWkK,sBAAoBjN,GAC/BkN,GAAWD,sBAAoBhR,GAC/B6I,GAAkBmI,sBAAoBtL,GACtCiD,GAAcuI,oBAAkB1B,GAEhC3O,GAAQC,EAAAA,WACR8H,GAAWuI,EAAAA,qBAAqB3L,EAAQD,GACxC6L,GAAiBC,EAAAA,kBACnB/R,EACAuB,IAEEyQ,GAAgBD,EAAAA,kBAClBhM,EACAxE,IAIJ0Q,IADmC,YAAdtN,EAA0B2G,EAAsBsC,GACvB,CAC1ChJ,OAAAA,EACAC,QAAAA,EACAnH,KAAAA,EACA8J,SAAAA,GACA9C,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACAjH,MAAAA,EACAE,OAAAA,EACAsL,SAAAA,GACAlE,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACA2G,UAAAA,GACAxC,YAAAA,GACAE,gBAAAA,GACAI,OAAAA,IAlBIrM,GAAI2U,GAAJ3U,KAAMmM,GAAMwI,GAANxI,OAAQC,GAAMuI,GAANvI,OAqBhBwI,GAAgBnQ,EAAAA,SAClB,WAAA,OACIzE,GACKyO,QACG,SAACnO,GAAG,OAAoE,OAAnBA,EAAIF,KAAKuF,KAClE,IACCxE,KAAI,SAACb,EAAKiG,GAAK,OAAAhF,KACTjB,EAAG,CACNiG,MAAAA,GAAK,MAEjB,CAACvG,KAGC6U,GAAuBjQ,eACzB,SAAAhE,GAA0D,IAAvDJ,EAAKI,EAALJ,MAAOE,EAAME,EAANF,OACN,QAAK0H,OACDG,GAAiB,GAAK/H,EAAQ+H,OAC9BC,GAAkB,GAAK9H,EAAS8H,IAEvC,GACD,CAACJ,GAAaG,GAAgBC,KAG5BsM,GAAarQ,EAAAA,SACf,WAAA,OACI2C,EAAKjG,KAAI,SAAAwJ,GACL,IAAMrK,EAAMN,GAAK+U,MAAK,SAAAzU,GAAG,OAAIA,EAAIF,KAAKkG,KAAOqE,KAE7C,OAAApJ,KAAYjB,EAAG,CAAEF,KAAImB,EAAA,CAAI+E,GAAIqE,GAAW,MAAHrK,OAAG,EAAHA,EAAKF,KAAI,CAAEgN,OAAQmB,GAAUG,SAAS/D,MAC/E,GAAE,GACN,CAAC4D,GAAWnH,EAAMpH,KAGhBgV,GAAoDvQ,EAAAA,SACtD,WAAA,OACIhD,GAAQN,KAAI,SAAAS,GAWR,MAAO,CAACA,EAVKmP,EAAc,CACvB/Q,KAA0B,SAApB4B,EAAOK,SAAsB6S,GAAa9U,GAChDgR,UAAWpP,EAAOoP,UAClBtI,KAAM9G,EAAOK,SACboF,UAAAA,EACAC,OAAAA,EACA2J,YAAAA,GACA1J,QAAAA,IAIR,GAAE,GACN,CAAC9F,GAASqT,GAAY9U,GAAMqH,EAAWC,EAAQ2J,GAAa1J,IAG1D0N,GAAYxQ,EAAAA,SACd,WAAA,ODjKwB,SAC5BzE,EACAmM,EACAC,EACA9E,EACAD,EACA+B,EACA2C,QAH0C,IAA1CzE,IAAAA,EAA6CJ,EAAaI,aACV,IAAhDD,IAAAA,EAAmDH,EAAaG,WAIhE,IAAM6N,EAAS,GAEf,GAAoB,IAAhBlV,EAAK0M,OAAc,OAAOwI,EAE9B,IAAMvD,EAAgB,IAAIwD,IAEpBtJ,EAAW7L,EAAK,GAAGQ,MACnBwM,EAAYhN,EAAK,GAAGU,OAE1B,GAAkB,YAAd2G,EAAyB,CACzB,IAAM2K,EAAyB,IAAImD,IAEnCnV,EAAKwM,SAAQ,SAAAlM,GACT,IAAA8U,EAA8B9U,EAAIF,KAA1B4I,EAAUoM,EAAVpM,WAAYrD,EAAKyP,EAALzP,MACpB+L,EAAoBC,EAAe3I,EAAY+B,OAAOpF,IACtDoM,EAA6BC,EAAwBhJ,EAAY+B,OAAOpF,GAC5E,IAEAqM,EAAuBxF,SAAQ,SAAC6I,EAAgBrM,GAC5C,IAEIsM,EACAC,EACAC,EAJEC,EAAa9D,EAAcE,IAAI7I,IAAe,EAMrC,aAAX1B,GACAgO,EAAYnJ,EAAOnD,GACnBuM,EAAYnJ,EAAOiJ,GACnBG,EAAkBpJ,EAAOiJ,EAAiB,KAE1CC,EAAYnJ,EAAOkJ,GACnBE,EAAYnJ,EAAOpD,GACnBwM,EAAkBrJ,EAAOkJ,EAAiB,IAG9CC,GAAwB,aAAXhO,EAAwBuE,EAAW,EAAIzC,EACpDmM,GAAwB,aAAXjO,GAAyB8B,EAAe4D,EAAY,EAEjEkI,EAAO7H,KAAK,CACR1C,IAAK,SAAW3B,EAChBzI,EAAG+U,EACH7U,EAAG8U,EACH5P,MAAO8P,EACPzO,eAAgB+E,EAAY0J,GAC5BD,gBAAAA,GAER,GACJ,MAAO,GAAkB,YAAdnO,EAAyB,CAChC,IAAM6K,EAAuB,IAAIiD,IAC3B9C,EAAsB,IAAI8C,IAEhCnV,EAAKwM,SAAQ,SAAAlM,GACT,IAAAoV,EAA8BpV,EAAIF,KAA1B4I,EAAU0M,EAAV1M,WAAYrD,EAAK+P,EAAL/P,MACpB+L,EAAoBC,EAAe3I,EAAY+B,OAAOpF,IACtDsM,EAA2BC,EAAsBlJ,EAAY+B,OAAOpF,IACpEyM,EAA0BC,EAAqBrJ,EACnD,IAEAkJ,EAAqB1F,SAAQ,SAACmJ,EAAe3M,GACzC,IAGIsM,EACAC,EACAC,EALEC,EAAa9D,EAAcE,IAAI7I,IAAe,EAC9C4M,EAAevD,EAAoBR,IAAI7I,GAM9B,aAAX1B,GACAgO,EAAYnJ,EAAOnD,GACnBuM,EAAYnJ,EAAOuJ,GACnBH,EAAkBpJ,EAAOuJ,EAAgB,KAEzCL,EAAYnJ,EAAOwJ,GACnBJ,EAAYnJ,EAAOpD,GACnBwM,EAAkBrJ,EAAOwJ,EAAgB,IAM7CL,GAAwB,aAAXhO,EAHUsO,EAAe/J,EAGgB,EAAIzC,EAC1DmM,GAAwB,aAAXjO,GAAyB8B,EAHdwM,EAAe5I,EAGgC,EAEvEkI,EAAO7H,KAAK,CACR1C,IAAK,SAAW3B,EAChBzI,EAAG+U,EACH7U,EAAG8U,EACH5P,MAAO8P,EACPzO,eAAgB+E,EAAY0J,GAC5BD,gBAAAA,GAER,GACJ,CACA,OAAON,CACX,CC2DcW,CAAiB7V,GAAMmM,GAAQC,GAAQ9E,EAAQD,EAAW+B,GAAc2C,GAAY,GAC1F,CAAC/L,GAAMmM,GAAQC,GAAQ9E,EAAQD,EAAW+B,GAAc2C,KAG5D,MAAO,CACH/L,KAAAA,GACA4U,cAAAA,GACAzI,OAAAA,GACAC,OAAAA,GACAlC,SAAAA,GACAmK,SAAAA,GACApI,gBAAAA,GACAF,YAAAA,GACAC,SAAAA,GACAwI,eAAAA,GACAE,cAAAA,GACAG,qBAAAA,GACAtG,UAAAA,GACA7M,YAAAA,GACAsT,gBAAAA,GACAC,UAAAA,GAER,ECvLaa,EAAY,SAAH/V,GAKC,IAJnBK,EAAIL,EAAJK,KACA2V,EAAYhW,EAAZgW,aACAtM,EAAO1J,EAAP0J,QAAOyJ,EAAAnT,EACPuH,OAAAA,OAAM,IAAA4L,EAAG7J,EAAgB/B,OAAM4L,EAEzBjP,EAAQC,EAAAA,WAmCd,OAlCyB8R,EAAaA,cAOpC5V,EAAM,CACJgH,KAAM,SAAA6O,GAAQ,OAAIA,EAAStL,GAAG,EAC9BjC,KAAM,SAAAuN,GAAQ,MAAK,CACf1V,EAAc,aAAX+G,EAAwB2O,EAAS1V,EAAI0V,EAAST,gBACjD/U,EAAc,aAAX6G,EAAwB2O,EAAST,gBAAkBS,EAASxV,EAC/DoC,aAAc,EAChB,EACFqT,MAAO,SAAAD,GAAQ,MAAK,CAChB1V,EAAG0V,EAAS1V,EACZE,EAAGwV,EAASxV,EACZoC,aAAc,EAChB,EACFsT,OAAQ,SAAAF,GAAQ,MAAK,CACjB1V,EAAG0V,EAAS1V,EACZE,EAAGwV,EAASxV,EACZoC,aAAc,EAChB,EACFuT,MAAO,SAAAH,GAAQ,MAAK,CAChB1V,EAAc,aAAX+G,EAAwB2O,EAAS1V,EAAI0V,EAAST,gBACjD/U,EAAc,aAAX6G,EAAwB2O,EAAST,gBAAkBS,EAASxV,EAC/DoC,aAAc,EAChB,EACFwT,OAAQN,EACRO,WAAY7M,EACZ8M,QAAS9M,OAAUvH,EAAY,MAG5BsU,EAAiB,SAAC/T,EAAOwT,GAAQ,OACpCjV,EAAAa,IAAC0D,EAAQA,SAACqB,KAAI,CAEVrG,EAAGkC,EAAMlC,EACTE,EAAGgC,EAAMhC,EACTiG,YAAajE,EAAMI,aACnBJ,MAAKlB,EAAA,CAAA,EACE0C,EAAM0C,OAAOC,KAAI,CACpBC,cAAe,SAEnB4P,WAAW,OACXC,SAAUzS,EAAM0C,OAAOC,KAAK8P,SAC5BC,WAAY1S,EAAM0C,OAAOC,KAAK+P,WAC9B1T,WAAuB,aAAXqE,EAAwB,SAAW,QAC/CsP,kBAA8B,aAAXtP,EAAwB,aAAe,SAASpG,SAElE+U,EAASjP,gBAdLiP,EAAStL,IAeF,GAExB,uECxCMkM,EAAW,SAAH9W,GAiFiB,IAhF3BK,EAAIL,EAAJK,KACA+G,EAAOpH,EAAPoH,QACAC,EAAIrH,EAAJqH,KAEQ0P,EAAa/W,EAArBsM,OACA7L,EAAKT,EAALS,MACAE,EAAMX,EAANW,OAEA2G,EAAStH,EAATsH,UACAC,EAAMvH,EAANuH,OACAC,EAAOxH,EAAPwH,QACAC,EAAQzH,EAARyH,SACAC,EAAQ1H,EAAR0H,SAEAC,EAAU3H,EAAV2H,WACAE,EAAU7H,EAAV6H,WAEAE,EAAO/H,EAAP+H,QACAC,EAAYhI,EAAZgI,aAEAgP,EAAOhX,EAAPgX,QACAC,EAASjX,EAATiX,UAASC,EAAAlX,EACTiI,WAAAA,OAAU,IAAAiP,EAAG5N,EAAgBrB,WAAUiP,EAAAC,EAAAnX,EACvCkI,SAAAA,OAAQ,IAAAiP,EAAG7N,EAAgBpB,SAAQiP,EAAAC,EAAApX,EACnCmI,YAAAA,OAAW,IAAAiP,EAAG9N,EAAgBnB,YAAWiP,EAAAC,EAAArX,EACzCoI,YAAAA,OAAW,IAAAiP,EAAG/N,EAAgBlB,YAAWiP,EACzCC,EAAWtX,EAAXsX,YACAC,EAAWvX,EAAXuX,YAAWC,EAAAxX,EAEXuJ,OAAAA,OAAM,IAAAiO,EAAGlO,EAAgBC,OAAMiO,EAAAC,EAAAzX,EAC/BwJ,aAAAA,OAAY,IAAAiO,EAAGnO,EAAgBE,aAAYiO,EAAA9D,EAAA3T,EAE3CqI,YAAAA,OAAW,IAAAsL,EAAGrK,EAAgBjB,YAAWsL,EACzCtQ,EAAKrD,EAALqD,MAAKuQ,EAAA5T,EACLwI,eAAAA,OAAc,IAAAoL,EAAGtK,EAAgBd,eAAcoL,EAAAC,EAAA7T,EAC/CyI,gBAAAA,OAAe,IAAAoL,EAAGvK,EAAgBb,gBAAeoL,EACjDnL,EAAc1I,EAAd0I,eAAcgP,EAAA1X,EACdsI,cAAAA,OAAa,IAAAoP,EAAGpO,EAAgBhB,cAAaoP,EAAAC,GAAA3X,EAC7CuI,YAAAA,QAAW,IAAAoP,GAAGrO,EAAgBf,YAAWoP,GAAAC,GAAA5X,EAEzCmJ,QAAAA,QAAO,IAAAyO,GAAGtO,EAAgBH,QAAOyO,GAEjChP,GAAO5I,EAAP4I,QACAC,GAAM7I,EAAN6I,OAAMgP,GAAA7X,EACNyJ,KAAAA,QAAI,IAAAoO,GAAGvO,EAAgBG,KAAIoO,GAAAC,GAAA9X,EAC3B+F,KAAAA,QAAI,IAAA+R,GAAGxO,EAAgBvD,KAAI+R,GAAAC,GAAA/X,EAC3BmD,aAAAA,QAAY,IAAA4U,GAAGzO,EAAgBnG,aAAY4U,GAAAC,GAAAhY,EAC3CoD,YAAAA,QAAW,IAAA4U,GAAG1O,EAAgBlG,YAAW4U,GACzCrV,GAAW3C,EAAX2C,YAAWsV,GAAAjY,EAEXE,YAAAA,QAAW,IAAA+X,GAAG3O,EAAgBpJ,YAAW+X,GAEzC/G,GAAWlR,EAAXkR,YACAnI,GAAY/I,EAAZ+I,aAEA8J,GAAW7S,EAAX6S,YAAWqF,GAAAlY,EAEXuD,cAAAA,QAAa,IAAA2U,GAAG5O,EAAgB/F,cAAa2U,GAAAC,GAAAnY,EAC7C2D,QAAAA,QAAO,IAAAwU,GAAG7O,EAAgB3F,QAAOwU,GACjC3U,GAAOxD,EAAPwD,QACAC,GAAYzD,EAAZyD,aACAC,GAAY1D,EAAZ0D,aAEAhC,GAAO1B,EAAP0B,QAAO0W,GAAApY,EAEP4J,KAAAA,QAAI,IAAAwO,GAAG9O,EAAgBM,KAAIwO,GAC3BvU,GAAS7D,EAAT6D,UACAC,GAAc9D,EAAd8D,eACAC,GAAe/D,EAAf+D,gBAAesU,GAAArY,EACf4D,YAAAA,QAAW,IAAAyU,GAAG/O,EAAgB1F,YAAWyU,GACzCC,GAAYtY,EAAZsY,aACAC,GAAiBvY,EAAjBuY,kBACAC,GAAkBxY,EAAlBwY,mBACAC,GAAazY,EAAbyY,cACAC,GAAe1Y,EAAf0Y,gBAEAxP,GAAgBlJ,EAAhBkJ,iBAAgByP,GAAA3Y,EAEhBoJ,aAAAA,QAAY,IAAAuP,GAAGrP,EAAgBF,aAAYuP,GAAA5E,GAAA/T,EAC3CqJ,aAAAA,QAAY,IAAA0K,GAAGzK,EAAgBD,aAAY0K,GAE3C6E,GAA0CC,EAAAA,kBAAlCnP,GAAOkP,GAAPlP,QAAiBsM,GAAY4C,GAApBtC,OACjBwC,GAAqEC,EAAaA,cAC9EtY,EACAE,EACAoW,GAHIiC,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAAa3M,GAAMwM,GAANxM,OAAQ4M,GAAUJ,GAAVI,WAAYC,GAAWL,GAAXK,YAMrDC,GAcI5G,EAAiB,CACjBpL,QAAAA,EACA/D,MAAAA,EACA0F,aAAAA,GACA8J,YAAAA,GACAhK,OAAAA,GACAD,QAAAA,GACAjG,YAAAA,GACA+F,eAAAA,EACApB,UAAAA,EACAC,OAAAA,EACAC,QAAAA,EACAnH,KAAAA,EACAgH,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACA4E,OAAAA,GACA7L,MAAOyY,GACPvY,OAAQwY,GACRpR,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACAQ,YAAAA,EACAG,eAAAA,EACAC,gBAAAA,EACA/G,QAAAA,GACAwP,YAAAA,GACAhI,iBAAAA,GACAG,aAAAA,KA1CApJ,GAAImZ,GAAJnZ,KACA4U,GAAauE,GAAbvE,cACAzI,GAAMgN,GAANhN,OACAC,GAAM+M,GAAN/M,OACAiI,GAAQ8E,GAAR9E,SACApI,GAAekN,GAAflN,gBACAuI,GAAc2E,GAAd3E,eACAE,GAAayE,GAAbzE,cACAG,GAAoBsE,GAApBtE,qBACAnT,GAAWyX,GAAXzX,YACAsT,GAAemE,GAAfnE,gBACAC,GAASkE,GAATlE,UACAjJ,GAAQmN,GAARnN,SAiCEoN,GAAqBpO,EAAsB1D,EAAQC,EAASc,EAAeC,IAE3E+Q,GAAarD,EAAaA,cAe9BpB,GAAe,CACbxN,KAAM,SAAA9G,GAAG,OAAIA,EAAIqK,GAAG,EACpBjC,KAAM,SAAApI,GAAG,OAAAiB,EAAA,CACLmB,YAAa8R,GAAelU,GAC5BqC,MAAOrC,EAAIqC,MACXjC,OAAQ,EACRkC,WAAY8R,GAAcpU,GAC1BuC,aAAc,GACXuW,GAAmB9Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CsC,UAAwB1C,aAAAA,EAAIC,EAAMD,MAAAA,EAAIG,EAAIH,EAAII,QAAS,IACvDF,MAAOF,EAAIE,OACI,aAAX8G,EACE,GACA,CACI5G,OAAQJ,EAAII,OACZsC,UAAS,aAAe1C,EAAIC,OAAMD,EAAIG,EAAI,IAC1CD,MAAO,GAEnB,EACF0V,MAAO,SAAA5V,GAAG,OAAAiB,EAAA,CACNmB,YAAa8R,GAAelU,GAC5BqC,MAAOrC,EAAIqC,MACXjC,OAAQJ,EAAII,OACZkC,WAAY8R,GAAcpU,GAC1BuC,aAAc,GACXuW,GAAmB9Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CsC,UAAS,aAAe1C,EAAIC,OAAMD,EAAIG,EAAI,IAC1CD,MAAOF,EAAIE,OACb,EACF2V,OAAQ,SAAA7V,GAAG,OAAAiB,EAAA,CACPmB,YAAa8R,GAAelU,GAC5BqC,MAAOrC,EAAIqC,MACXjC,OAAQJ,EAAII,OACZkC,WAAY8R,GAAcpU,GAC1BuC,aAAc,GACXuW,GAAmB9Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CsC,UAAS,aAAe1C,EAAIC,OAAMD,EAAIG,EAAI,IAC1CD,MAAOF,EAAIE,OACb,EACF4V,MAAO,SAAA9V,GAAG,OAAAiB,EAAA,CACNmB,YAAa8R,GAAelU,GAC5BqC,MAAOrC,EAAIqC,MACXjC,OAAQ,EACRkC,WAAY8R,GAAcpU,GAC1BuC,aAAc,GACXuW,GAAmB9Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CqC,OAAQ,EACRC,UAAwB1C,aAAAA,EAAIC,EAAMD,MAAAA,EAAIG,EAAIH,EAAII,QAAS,IACvDF,MAAOF,EAAIE,OACI,aAAX8G,EACE,CAAE,EAAA/F,EAAA,CAAA,EAEK6X,GAAmB9Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CoC,OAAQ,EACRpC,OAAQJ,EAAII,OACZsC,UAAS,aAAe1C,EAAIC,OAAMD,EAAIG,EAAI,IAC1CD,MAAO,IAEnB,EACF6V,OAAQN,GACRO,WAAY7M,GACZ8M,QAAS9M,QAAUvH,EAAY,OAG7BoX,GAAc7U,EAAAA,SAChB,WAAA,MAAO,CACHvB,aAAAA,GACAC,YAAAA,GACAiF,YAAAA,EACA9E,cAAAA,GACAiF,eAAAA,EACAC,gBAAAA,EACAjF,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAwI,gBAAAA,GACAvI,QAAAA,GACAC,YAAAA,GACAC,UAAWyU,GACXxU,eAAgByU,GAChBxU,gBAAiByU,GACjBvU,WAAYwU,GACZzU,aAAc0U,GACjB,GACD,CACIvV,GACAC,GACAiF,EACA6D,GACA3I,GACAkF,EACAD,EACAhF,GACAC,GACAC,GACAC,GACAC,GACA0U,GACAC,GACAC,GACAC,GACAC,KAIFc,GAAYC,EAAQA,SAAChQ,GAAMxJ,GAAM8F,GAAM,CACzC2T,QAAS,OACTC,UAAW,cAGTC,GAA2C,CAC7C1Z,YAAa,KACb2Z,KAAM,KACN5Z,KAAM,KACN6Z,KAAM,KACNpY,QAAS,KACTyH,QAAS,KACTgM,OAAQ,MAGR5L,EAAOoF,SAAS,iBAChBiL,GAAU1Z,YACNe,EAAAa,IAAC/B,EAAc,CAAmBE,KAAMA,GAAMC,YAAaA,IAAvC,gBAIxBqJ,EAAOoF,SAAS,UAChBiL,GAAUC,KACN5Y,EAAAa,IAACiY,OAAI,CAED3N,OAAQA,GACRC,OAAQA,GACR5L,MAAOyY,GACPvY,OAAQwY,GACR3L,IAAKwJ,EACLgD,MAAO/C,EACPgD,OAAQhS,EACRsF,KAAMrF,GARF,SAaZqB,EAAOoF,SAAS,UAChBiL,GAAU3Z,KACNgB,EAAAa,IAACoY,WAAQ,CAAA/Y,SACJmY,IAAW,SAAC5W,EAAOnC,GAAG,OACnBoE,EAAaA,cAAC6E,EAAYhI,KACnB+X,GAAW,CACdhZ,IAAAA,EACAmC,MAAAA,EACAY,kBAAmBwR,GAAqBvU,GACxC8C,MAAOiR,GAAS/T,EAAIF,aAPlB,SAclBkJ,EAAOoF,SAAS,UAChBiL,GAAUE,KACN7Y,EAAAa,IAACqY,OAAI,CAED1Z,MAAOyY,GACPvY,OAAQwY,GACR/M,OAAQjE,EAAciE,GAAS,KAC/BC,OAAQjE,EAAciE,GAAS,KAC/B+N,QAAS9C,EACT+C,QAAS9C,GANL,SAWZhO,EAAOoF,SAAS,aAChBiL,GAAUlY,QACNT,EAAAa,IAACL,EAAU,CAEPhB,MAAOyY,GACPvY,OAAQwY,GACRzX,QAASuT,GACTtT,YAAaA,IAJT,YASZ4H,EAAOoF,SAAS,aAChBiL,GAAUzQ,QACNlI,EAAAa,IAACwY,mBAAgB,CAEbnR,QAASA,GACT1I,MAAOyY,GACPvY,OAAQwY,GACR/M,OAAQA,GACRC,OAAQA,IALJ,YAUZ9C,EAAOoF,SAAS,WAAavF,KAC7BwQ,GAAUzE,OACNlU,EAAAa,IAACiU,EAAS,CAEN1V,KAAM6U,GACNc,aAAcA,GACdtM,QAASA,GACTnC,OAAQA,GAJJ,WAShB,IAAMgT,GAA8C7V,EAAAA,SAChD,WAAA,OAAAlD,KACO+X,GAAW,CACdjN,OAAAA,GACA7L,MAAAA,EACAE,OAAAA,EACAuY,WAAAA,GACAC,YAAAA,GACAlZ,KAAAA,GACA8U,WAAYE,GACZ5M,YAAAA,EACA+D,OAAAA,GACAC,OAAAA,GACA1I,QAAAA,GACAuI,gBAAAA,GACA1I,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAuI,SAAAA,IAAQ,GAEZ,CACIsN,GACAjN,GACA7L,EACAE,EACAuY,GACAC,GACAlZ,GACAgV,GACA5M,EACA+D,GACAC,GACA1I,GACAuI,GACA1I,GACAC,GACAC,GACAuI,KAIR,OACIhL,EAAAA,IAACuZ,EAAAA,WAAU,CACP/Z,MAAOuY,GACPrY,OAAQsY,GACR3M,OAAQA,GACR7C,KAAM+P,GACN5P,KAAMA,GACN/F,UAAWA,GACXC,eAAgBA,GAChBC,gBAAiBA,GACjBH,YAAaA,GAAYzC,SAExBoI,EAAOnI,KAAI,SAACqZ,EAAOnZ,GAAM,IAAAoZ,EACtB,MAAqB,mBAAVD,EACAxZ,EAAAA,IAACiZ,EAAAA,SAAQ,CAAA/Y,SAAUwD,EAAAA,cAAc8V,EAAOF,KAAzBjZ,GAGD,OAAzBoZ,EAAOd,MAAAA,QAAAA,EAAAA,GAAYa,IAAMC,EAAI,SAI7C,EAEaC,GAAM,SAAH9Z,GAAA,IAAA+Z,EAAA/Z,EACZ0C,cAAAA,OAAa,IAAAqX,EAAGtR,EAAgB/F,cAAaqX,EAAAC,EAAAha,EAC7C6I,QAAAA,OAAO,IAAAmR,EAAGvR,EAAgBI,QAAOmR,EAAAC,EAAAja,EACjC8I,aAAAA,OAAY,IAAAmR,EAAGxR,EAAgBK,aAAYmR,EAC3C5W,EAAKrD,EAALqD,MACA6W,EAAala,EAAbka,cACGC,EAAUzY,EAAA1B,EAAA2B,GAAA,OAEbvB,EAAAA,IAACga,EAAAA,UAAS,CAEFvR,QAAAA,EACAnG,cAAAA,EACAoG,aAAAA,EACAoR,cAAAA,EACA7W,MAAAA,EAAK/C,SAGTF,EAAAA,IAAC6V,EAAQtV,EAAA,CAAW+B,cAAeA,GAAmByX,KAC9C,+CC5aVE,GAAqB,SACvBC,EACA7O,EACA9L,EACAE,GAAS,OAETya,EAAMnG,MAAK,SAAAoG,GAAI,OACXC,EAAAA,eAAeD,EAAK5a,EAAI8L,EAAOiB,KAAM6N,EAAK1a,EAAI4L,EAAOkB,IAAK4N,EAAK3a,MAAO2a,EAAKza,OAAQH,EAAGE,EAAE,GAC3F,EAmBL,IAAM4a,GAAiB,SAAHtb,GAuGiB,IAtGjCK,EAAIL,EAAJK,KACA+G,EAAOpH,EAAPoH,QACAC,EAAIrH,EAAJqH,KAEQ0P,EAAa/W,EAArBsM,OACA7L,EAAKT,EAALS,MACAE,EAAMX,EAANW,OAEA2G,EAAStH,EAATsH,UACAC,EAAMvH,EAANuH,OACAC,EAAOxH,EAAPwH,QACAC,EAAQzH,EAARyH,SACAC,EAAQ1H,EAAR0H,SAEAC,EAAU3H,EAAV2H,WACAE,EAAU7H,EAAV6H,WAEAE,EAAO/H,EAAP+H,QACAC,EAAYhI,EAAZgI,aAEAgP,EAAOhX,EAAPgX,QACAC,EAASjX,EAATiX,UAASC,EAAAlX,EACTiI,WAAAA,OAAU,IAAAiP,EAAGrN,EAAmB5B,WAAUiP,EAAAC,EAAAnX,EAC1CkI,SAAAA,OAAQ,IAAAiP,EAAGtN,EAAmB3B,SAAQiP,EAAAC,EAAApX,EACtCmI,YAAAA,OAAW,IAAAiP,EAAGvN,EAAmB1B,YAAWiP,EAAAC,EAAArX,EAC5CoI,YAAAA,OAAW,IAAAiP,EAAGxN,EAAmBzB,YAAWiP,EAC5CC,EAAWtX,EAAXsX,YACAC,EAAWvX,EAAXuX,YAAWG,EAAA1X,EAEXsI,cAAAA,OAAa,IAAAoP,EAAG7N,EAAmBvB,cAAaoP,EAAAC,EAAA3X,EAChDuI,YAAAA,OAAW,IAAAoP,EAAG9N,EAAmBtB,YAAWoP,EAAAH,EAAAxX,EAE5CuJ,OAAAA,OAAM,IAAAiO,EAAG3N,EAAmBN,OAAMiO,EAAA+D,EAAAvb,EAClCwb,UAAAA,OAAS,IAAAD,EAAG,SACRE,EAAG5a,GAaF,IAAA6a,EAAA7a,EAXGN,IAAOqC,EAAK8Y,EAAL9Y,MAAOjC,EAAM+a,EAAN/a,OAAQF,EAAKib,EAALjb,MAAOD,EAACkb,EAADlb,EAAGE,EAACgb,EAADhb,EAChCiC,EAAW9B,EAAX8B,YACAQ,EAAYtC,EAAZsC,aACAC,EAAWvC,EAAXuC,YACAC,EAAKxC,EAALwC,MACAC,EAAiBzC,EAAjByC,kBACAqY,EAAU9a,EAAV8a,WACA5Y,EAAMlC,EAANkC,OACAC,EAAMnC,EAANmC,OACAE,EAAUrC,EAAVqC,WAGJuY,EAAIG,UAAYhZ,EACZQ,EAAc,IACdqY,EAAII,YAAclZ,EAClB8Y,EAAIK,UAAY1Y,GAGpBqY,EAAIM,YACJC,EAAAA,YAAYP,EAAKjb,EAAGE,EAAGD,EAAOE,EAAQI,KAAKwJ,IAAIpH,EAAcxC,IAC7D8a,EAAI1V,OAEA3C,EAAc,GACdqY,EAAIxV,SAGJ3C,IACAmY,EAAIQ,aAAe,SACnBR,EAAIS,UAA2B,WAAfhZ,EAA0B,SAAWA,EACrDiZ,iBAAeV,EAAKE,EAAYtY,EAAO7C,EAAIuC,EAAQrC,EAAIsC,GAE/D,EAACuY,EAAA5H,EAAA3T,EAEDqI,YAAAA,OAAW,IAAAsL,EAAG9J,EAAmBxB,YAAWsL,EAC5CtQ,EAAKrD,EAALqD,MAAKuQ,EAAA5T,EACLwI,eAAAA,QAAc,IAAAoL,EAAG/J,EAAmBrB,eAAcoL,EAAAC,GAAA7T,EAClDyI,gBAAAA,QAAe,IAAAoL,GAAGhK,EAAmBpB,gBAAeoL,GACpDnL,GAAc1I,EAAd0I,eAEAE,GAAO5I,EAAP4I,QACAC,GAAM7I,EAAN6I,OAAMkP,GAAA/X,EACNmD,aAAAA,QAAY,IAAA4U,GAAGlO,EAAmB1G,aAAY4U,GAAAC,GAAAhY,EAC9CoD,YAAAA,QAAW,IAAA4U,GAAGnO,EAAmBzG,YAAW4U,GAC5CrV,GAAW3C,EAAX2C,YAAWsV,GAAAjY,EAEXE,YAAAA,QAAW,IAAA+X,GAAGpO,EAAmB3J,YAAW+X,GAE5C/G,GAAWlR,EAAXkR,YACAnI,GAAY/I,EAAZ+I,aAEA8J,GAAW7S,EAAX6S,YAAWqF,GAAAlY,EAEXuD,cAAAA,QAAa,IAAA2U,GAAGrO,EAAmBtG,cAAa2U,GAAAC,GAAAnY,EAChD2D,QAAAA,QAAO,IAAAwU,GAAGtO,EAAmBlG,QAAOwU,GACpC3U,GAAOxD,EAAPwD,QACAC,GAAYzD,EAAZyD,aACAC,GAAY1D,EAAZ0D,aAEAhC,GAAO1B,EAAP0B,QAAO0a,GAAApc,EAEP8J,WAAAA,QAAU,IAAAsS,GAAGvS,EAAmBC,WAAUsS,GAE1CC,GAASrc,EAATqc,UAAS1D,GAAA3Y,EAEToJ,aAAAA,QAAY,IAAAuP,GAAG9O,EAAmBT,aAAYuP,GAAA5E,GAAA/T,EAC9CqJ,aAAAA,QAAY,IAAA0K,GAAGlK,EAAmBR,aAAY0K,GAExCuI,GAAWC,SAAiC,MAE5CrY,GAAQC,EAAAA,WACd2U,GAAqEC,EAAaA,cAC9EtY,EACAE,EACAoW,GAHIzK,GAAMwM,GAANxM,OAAQ4M,GAAUJ,GAAVI,WAAYC,GAAWL,GAAXK,YAAaH,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAMrDG,GAaI5G,EAAiB,CACjBpL,QAAAA,EACA/D,MAAAA,EACA0F,aAAAA,GACA8J,YAAAA,GACAhK,OAAAA,GACAD,QAAAA,GACAjG,YAAAA,GACA+F,eAAAA,GACApB,UAAAA,EACAC,OAAAA,EACAC,QAAAA,EACAnH,KAAAA,EACAgH,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACA4E,OAAAA,GACA7L,MAAOyY,GACPvY,OAAQwY,GACRpR,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACAQ,YAAAA,EACAG,eAAAA,GACAC,gBAAAA,GACA/G,QAAAA,GACAwP,YAAAA,GACA7H,aAAAA,KAxCApJ,GAAImZ,GAAJnZ,KACA4U,GAAauE,GAAbvE,cACAzI,GAAMgN,GAANhN,OACAC,GAAM+M,GAAN/M,OACAiI,GAAQ8E,GAAR9E,SACApI,GAAekN,GAAflN,gBACAuI,GAAc2E,GAAd3E,eACAE,GAAayE,GAAbzE,cACAG,GAAoBsE,GAApBtE,qBACAG,GAAemE,GAAfnE,gBACAC,GAASkE,GAATlE,UACAjJ,GAAQmN,GAARnN,SAgCJ7H,GAA8CC,EAAAA,aAAtCC,GAAoBF,GAApBE,qBAAsBE,GAAWJ,GAAXI,YAGxBrE,GAAwBqc,EAAAA,uBAAuB,CACjDtc,YAAaE,EAAAA,eAAe,CACxBC,KAAMJ,GACNC,YAAAA,GACAI,YAAa,SAAA8a,GAAI,MAAK,CAClB5a,EAAG4a,EAAK5a,EACRE,EAAG0a,EAAK1a,EACV,EACFE,cAAe,SAAFsN,GAAA,IAAKzN,EAAKyN,EAALzN,MAAOE,EAAMuN,EAANvN,OAAM,MAAQ,CACnCF,MAAAA,EACAE,OAAAA,EACAG,KAAMC,KAAKC,IAAIP,EAAOE,GACzB,MAKH4Z,GAAoD7V,EAAAA,SACtD,WAAA,MAAO,CACHvB,aAAAA,GACAC,YAAAA,GACAG,cAAAA,GACAK,aAAa,EACb4E,eAAAA,GACAC,gBAAAA,GACA6D,OAAAA,GACA7L,MAAAA,EACAE,OAAAA,EACAuY,WAAAA,GACAC,YAAAA,GACAlZ,KAAAA,GACA8U,WAAYE,GACZ5M,YAAAA,EACA+D,OAAAA,GACAC,OAAAA,GACA1I,QAAAA,GACAuI,gBAAAA,GACA1I,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAuI,SAAAA,GACF,GACF,CACI9I,GACAC,GACAG,GACAiF,GACAC,GACA6D,GACA7L,EACAE,EACAuY,GACAC,GACAlZ,GACAgV,GACA5M,EACA+D,GACAC,GACA1I,GACAuI,GACA1I,GACAC,GACAC,GACAuI,KAIFD,GAAcuI,oBAAkB1B,IAChCwG,GAAqBpO,EAAsB1D,EAAQC,EAASc,EAAeC,GAEjFkU,EAAAA,WAAU,WAAM,IAAAC,EACNjB,EAAsB,OAAnBiB,EAAGJ,GAASK,cAAO,EAAhBD,EAAkBE,WAAW,MAEpCN,GAASK,SACTlB,IAELa,GAASK,QAAQlc,MAAQuY,GAAalP,GACtCwS,GAASK,QAAQhc,OAASsY,GAAcnP,GAExC2R,EAAIlM,MAAMzF,GAAYA,IAEtB2R,EAAIG,UAAY1X,GAAM2Y,WACtBpB,EAAIqB,SAAS,EAAG,EAAG9D,GAAYC,IAC/BwC,EAAIsB,UAAUzQ,GAAOiB,KAAMjB,GAAOkB,KAElCjE,EAAOkD,SAAQ,SAAAgO,GACG,SAAVA,EAvQuD,iBAwQ1CvW,GAAM4V,KAAKkD,KAAKhX,aAAgB9B,GAAM4V,KAAKkD,KAAKhX,YAAc,IACvEyV,EAAIK,UAAY5X,GAAM4V,KAAKkD,KAAKhX,YAChCyV,EAAII,YAAc3X,GAAM4V,KAAKkD,KAAK/W,OAE9BkC,GACA8U,EAAAA,wBAAyCxB,EAAK,CAC1Chb,MAAOyY,GACPvY,OAAQwY,GACR5J,MAAOnD,GACPhC,KAAM,IACN4E,OAAQsI,IAIZlP,GACA6U,EAAAA,wBAAyCxB,EAAK,CAC1Chb,MAAOyY,GACPvY,OAAQwY,GACR5J,MAAOlD,GACPjC,KAAM,IACN4E,OAAQuI,KAIH,SAAVkD,EACPyC,EAAAA,mBAAmBzB,EAAK,CACpBrP,OAAQA,GACRC,OAAQA,GACR5L,MAAOyY,GACPvY,OAAQwY,GACR3L,IAAKwJ,EACLgD,MAAO/C,EACPgD,OAAQhS,EACRsF,KAAMrF,EACNhE,MAAAA,KAEa,SAAVuW,GACP0C,EAAAA,cAAc1B,EAAKvX,GAAM2C,MAEzBgO,GAAcpI,SAAQ,SAAAlM,GAClBib,EAAUC,EAAGja,EAAA,CACTjB,IAAAA,EACAoC,YAAa8R,GAAelU,GAC5B4C,aAAAA,GACAC,YAAAA,GACAC,MAAOiR,GAAS/T,EAAIF,MACpBiD,kBAAmBwR,GAAqBvU,GACxCob,WAAUna,EAAA,CAAA,EACH0C,GAAM0C,OAAOC,KAAI,CACpBd,KAAM4O,GAAcpU,MAErB8Y,GAAmB9Y,EAAIE,MAAOF,EAAII,SAE7C,KACiB,YAAV8Z,EACPxF,GAAgBxI,SAAQ,SAAAmC,GAAoB,IAAlB/M,EAAM+M,EAAA,GAAEvO,EAAIuO,EAAA,GAClCwO,EAAAA,qBAAqB3B,EAAGja,KACjBK,EAAM,CACTxB,KAAAA,EACA2B,eAAgBkX,GAChBjX,gBAAiBkX,GACjBjV,MAAAA,KAER,IACiB,gBAAVuW,EACP4C,EAAAA,0BAA0B5B,EAAK,CAAEvb,YAAaC,GAAkB+D,MAAAA,KAC/C,WAAVuW,GAAsBrR,GAxU7C,SACIqS,EACAvG,EACAhR,EACAqD,QAA0C,IAA1CA,IAAAA,EAA6CsC,EAAmBtC,QAEhE4V,EAAAA,cAAc1B,EAAKvX,EAAM0C,OAAOC,MAChC4U,EAAIQ,aAA0B,aAAX1U,EAAwB,aAAe,SAC1DkU,EAAIS,UAAuB,aAAX3U,EAAwB,SAAW,QAEnD2N,EAAUzI,SAAQ,SAAAyJ,GACdiG,EAAAA,eAAeV,EAAKvX,EAAM0C,OAAOC,KAAMqP,EAASjP,eAAgBiP,EAAS1V,EAAG0V,EAASxV,EACzF,GACJ,CA4TgB4c,CAAqB7B,EAAKvG,GAAWhR,GAAOqD,GACpB,mBAAVkT,GACdA,EAAMgB,EAAKlB,GAEnB,IAEAkB,EAAI8B,OACR,GAAG,CACCtV,EACAC,EACA+O,EACAD,EACAnC,GACA1R,GACAC,GACAjD,GACAgI,EACAC,EACAqM,GACAH,GACAK,GACA2C,EACAC,EACAjQ,EACA3G,EACAwY,GACAD,GACAqB,GACAhR,EACAhC,EACA0N,GACA3I,GAAOiB,KACPjB,GAAOkB,IACPyL,GACAD,GACAlP,GACA0R,EACApP,GACAC,GACA7E,EACAsN,GACA5Q,GACAzD,EACAyU,GACA9L,GACA4C,GACAqN,KAGJ,IAAMmE,GAAmB3Y,eACrB,SAACC,GACG,GAAK7E,IACAqc,GAASK,QAAd,CAEA,IAAAc,EAAeC,EAAiBA,kBAACpB,GAASK,QAAS7X,GAA5CtE,EAACid,EAAA,GAAE/c,EAAC+c,EAAA,GACLld,EAAM2a,GAAmBjb,GAAMqM,GAAQ9L,EAAGE,QAEpCyB,IAAR5B,GACA+D,GACIK,EAAaA,cAAChB,GAAOnC,EAAA,CAAA,EACdjB,EAAIF,KAAI,CACXuC,MAAOrC,EAAIqC,MACXS,MAAO9C,EAAI8C,MACXuC,MAAOoF,OAAOzK,EAAIF,KAAKuF,UAE3Bd,GAGe,eAAfA,EAAM8C,OACM,MAAZnE,IAAAA,GAAelD,EAAIF,KAAMyE,KAG7BN,IApBmB,CAsB3B,GACA,CAACA,GAAa8H,GAAQ7I,GAAcxD,GAAMqE,GAAsBX,KAG9DsB,GAAmBJ,eACrB,SAACC,GACG,GAAK7E,IACAqc,GAASK,QAAd,CAEAnY,KAEA,IAAAmZ,EAAeD,EAAiBA,kBAACpB,GAASK,QAAS7X,GAA5CtE,EAACmd,EAAA,GAAEjd,EAACid,EAAA,GACLpd,EAAM2a,GAAmBjb,GAAMqM,GAAQ9L,EAAGE,GAE5CH,IACY,MAAZmD,IAAAA,GAAenD,EAAIF,KAAMyE,GARN,CAU1B,GACD,CAACN,GAAa8H,GAAQ5I,GAAczD,KAGlC2E,GAAcC,eAChB,SAACC,GACG,GAAK7E,IACAqc,GAASK,QAAd,CAEA,IAAAiB,EAAeF,EAAiBA,kBAACpB,GAASK,QAAS7X,GAA5CtE,EAACod,EAAA,GAAEld,EAACkd,EAAA,GACLrd,EAAM2a,GAAmBjb,GAAMqM,GAAQ9L,EAAGE,QAEpCyB,IAAR5B,UACAiD,IAAAA,GAAOhC,EAAQjB,CAAAA,EAAAA,EAAIF,KAAI,CAAEuC,MAAOrC,EAAIqC,QAASkC,GAN1B,CAQ1B,GACD,CAACwH,GAAQ9I,GAASvD,KAGtB,OACIgB,EAAAA,IAAA,SAAA,CACI4c,IAAK,SAAAC,GACDxB,GAASK,QAAUmB,EACfzB,IAAa,YAAaA,KAAWA,GAAUM,QAAUmB,EAC/D,EACFrd,MAAOuY,GAAalP,GACpBnJ,OAAQsY,GAAcnP,GACtBpH,MAAO,CACHjC,MAAOuY,GACPrY,OAAQsY,GACR8E,OAAQxa,GAAgB,OAAS,UAErCE,aAAcF,GAAgBia,QAAmBrb,EACjDiE,YAAa7C,GAAgBia,QAAmBrb,EAChDuB,aAAcH,GAAgB0B,QAAmB9C,EACjDqB,QAASD,GAAgBqB,QAAczC,GAGnD,EAEa6b,GAAYC,EAAUA,YAC/B,SAAAzO,EAEIqO,GAAoC,IADlCta,EAAaiM,EAAbjM,cAAewX,EAAavL,EAAbuL,cAAe7W,EAAKsL,EAALtL,MAAUuK,EAAKlM,EAAAiN,EAAAhN,IAAA,OAG/CvB,EAAAA,IAACga,EAAAA,UAAS,CAAO1X,cAAAA,EAAewX,cAAAA,EAAe7W,MAAAA,EAASwF,SAAS,EAAMvI,SACnEF,EAAAA,IAACqa,GAAc9Z,KAAeiN,EAAK,CAAE4N,UAAWwB,MACxC,ICrgBPK,GAAsBD,EAAAA,YAAW,SAE5CxP,EAA2CoP,GACzC,OACI5c,EAAAA,IAACkd,EAAAA,kBAAiB,CAAAhd,SACb,SAAAnB,GAAA,IAAGS,EAAKT,EAALS,MAAOE,EAAMX,EAANW,OAAM,OACbM,EAAAa,IAACkc,GAASxc,EAAA,CACNf,MAAOA,EACPE,OAAQA,GACH8N,EAAK,CACVoP,IAAKA,IACP,GAIlB,yHChB6B,SACzBpP,GAAsC,OAEtCxN,EAAAA,IAACkd,EAAAA,kBAAiB,CAAAhd,SACb,SAAAnB,GAAA,IAAGS,EAAKT,EAALS,MAAOE,EAAMX,EAANW,OAAM,OAAOM,EAAAa,IAAC6Y,GAAGnZ,EAAA,CAAWf,MAAOA,EAAOE,OAAQA,GAAY8N,GAAS,GAClE"}