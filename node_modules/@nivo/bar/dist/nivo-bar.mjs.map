{"version":3,"file":"nivo-bar.mjs","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/props.ts","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/compute/totals.ts","../src/hooks.ts","../src/BarTotals.tsx","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBar.tsx","../src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Text } from '@nivo/text'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n                data-testid={`bar.item.${data.id}.${data.index}`}\n            />\n            {shouldRenderLabel && (\n                <Text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        // We don't want the label to intercept mouse events\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </Text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { BarCanvasLayerId, BarLayerId, ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'] as BarLayerId[],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'] as BarCanvasLayerId[],\n\n    pixelRatio: typeof window !== 'undefined' ? (window.devicePixelRatio ?? 1) : 1,\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            }) as RawDatum\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<RawDatum extends BarDatum>(\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    reverse: BarCommonProps<RawDatum>['reverse'] = defaultProps.reverse,\n    labelPosition: BarCommonProps<RawDatum>['labelPosition'] = defaultProps.labelPosition,\n    labelOffset: BarCommonProps<RawDatum>['labelOffset'] = defaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? (yScale(d) ?? 0) : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : (xScale(d) ?? 0))\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy.js'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <RawDatum extends BarDatum>(\n    bars: ComputedBarDatum<RawDatum>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    groupMode: BarCommonProps<RawDatum>['groupMode'] = defaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useValueFormatter, Margin } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n    totalsOffset = defaultProps.totalsOffset,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n    totalsOffset?: BarCommonProps<RawDatum>['totalsOffset']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n","import { useTheme } from '@nivo/theming'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './props'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n\n    initialHiddenIds,\n\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<RawDatum>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useValueFormatter,\n} from '@nivo/core'\nimport { Theme, useTheme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { roundedRect } from '@nivo/canvas'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<RawDatum extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: Theme,\n    layout: BarCommonProps<RawDatum>['layout'] = canvasDefaultProps.layout\n) {\n    setCanvasFont(ctx, theme.labels.text)\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        drawCanvasText(ctx, theme.labels.text, barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            shouldRenderLabel,\n            labelStyle,\n            labelX,\n            labelY,\n            textAnchor,\n        }\n    ) => {\n        ctx.fillStyle = color\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n        roundedRect(ctx, x, y, width, height, Math.min(borderRadius, height))\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n            drawCanvasText(ctx, labelStyle, label, x + labelX, y + labelY)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                setCanvasFont(ctx, theme.text)\n\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        labelStyle: {\n                            ...theme.labels.text,\n                            fill: getLabelColor(bar) as string,\n                        },\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum,\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","_legend$data","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","_data$fill","_ref$bar","_objectWithoutPropertiesLoose","_excluded","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","textAnchor","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaDisabled","ariaHidden","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","id","index","Text","dominantBaseline","fillOpacity","labels","text","pointerEvents","BarTooltip","BasicTooltip","formattedValue","enableChip","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelPosition","labelOffset","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","tooltipLabel","datum","indexValue","initialHiddenIds","markers","enableTotals","totalsOffset","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","useComputeLabelLayout","computedLabelOffset","gt","other","lt","range","start","end","Array","repeat","_","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","_xScale","d","_yScale","_coerceValue","rawValue","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_yScale3","_xScale2","_coerceValue2","_xScale3","getWidth","generateGroupedBars","_ref3","_scale","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","scaleSpec","clampMin","values","entry","concat","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","flattenDeep","arr","some","isArray","generateVerticalStackedBars","stackedData","stackedDataItem","_getY","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","updateTotalsByIndex","totalsByIndex","currentIndexValue","get","set","updateTotalsPositivesByIndex","totalsPositivesByIndex","updateGreatestValueByIndex","greatestValueByIndex","currentGreatestValue","updateNumberOfBarsByIndex","numberOfBarsByIndex","currentNumberOfBars","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$reverse","_ref$minValue","_ref$maxValue","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_ref$totalsOffset","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","barTotals","totals","Map","_bar$data","totalsPositive","xPosition","yPosition","animationOffset","indexTotal","_bar$data2","greatestValue","numberOfBars","computeBarTotals","BarTotals","springConfig","useTransition","barTotal","enter","update","leave","config","immediate","initial","totalsTransition","fontWeight","fontSize","fontFamily","alignmentBaseline","InnerBar","partialMargin","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$labelPosition","_ref$labelOffset","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","barAriaHidden","barAriaDisabled","_ref$enableTotals","_useMotionConfig","useMotionConfig","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","computeLabelLayout","transition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","_layerById$layer","Bar","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","_ref$renderBar","renderBar","ctx","_ref2$bar","labelStyle","fillStyle","strokeStyle","lineWidth","beginPath","roundedRect","textBaseline","textAlign","drawCanvasText","_ref$pixelRatio","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","_canvasEl$current","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","setCanvasFont","renderLegendToCanvas","renderAnnotationsToCanvas","renderTotalsToCanvas","save","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas"],"mappings":"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"}